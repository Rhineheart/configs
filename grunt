#!/usr/bin/node

var childProcess = require("child_process");
var http  = require("http"),
    https = require("https");

var before = Date.now();

var proc = childProcess.spawn("grunt-ln", process.argv.splice(2), {cwd: process.cwd(), env: process.env});

proc.stdout.pipe(process.stdout);
proc.stderr.pipe(process.stderr);
process.stdin.pipe(proc.stdin);

proc.on("close", function(code) {
    var after = Date.now();

    request({
        host:   "storage.memset.se",
        path:   "/storage/compiling",
        port:   "443",
        tls:    true,
        headers: {
            accept:         "*/*",
            "content-type": "application/json"
        },
        data: {
            exitCode:    code,
            elapsedTime: after - before,
            cwd:         process.cwd()
        },
        method: "POST"
    }).then(function(response) {
        console.log("Closed with code:", code);
        console.log("Time compiling:", (after - before) + "ms");
        process.exit(0);
    }).catch(function(err) {
        console.error(err); 
        process.exit(1);
    });
});

/**
 * @description HTTP Request
 *
 * @param {Object} options - An object containing information relevant to a
 *                           http or https request call. See node.js reference.
 *                           There's also a 'tls' property to set if you want
 *                           https or http connection. Defaults to true.
 * @returns {Promise}
 */
function request(options) {
    if(!options) {
        return Promise.reject("No options given.");
    }

    options.tls = options.tls === undefined ? true : options.tls;

    return new Promise(function(fulfill, reject) {
        var protocol = options.tls ? https : http;
        var req = protocol.request(options, function(res) {
            var body = "";
            res.on("data", function(chunk) {
                body += chunk.toString("utf8");
            });

            res.on("end", function() {
                res.responseText = body;
                fulfill(res);
            });
        });

        if(options.data) {
            if(typeof options.data === "object") {
                req.write(JSON.stringify(options.data));
            }
        }

        req.end();
        req.on("error", function(err) {
            reject(err);
        });
    });
}
